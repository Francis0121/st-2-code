// 5_lamda
// 1. 인라인 함수와 함수 포인터 관계

// 핵심	1. 인라인 치환은 컴파일 시간 문법이다.
//		2. 

int Add1(int a, int b) { 
	return a + b; 
}

inline int Add2(int a, int b) {
	return a + b;
}

int main() {
	int n1 = Add1(1, 2); // 호출
	int n2 = Add2(1, 2); // 기계어 코드 치환 - 속도가 빨라진다.

	int(*f)(int, int);

	f = &Add2;
	//-----------------------------
	// 컴파일 시에 해결하기 때문에 이것은 치환되지 않는다.( 런타임이 되어야 알 수 있다. )
	//int n = 0;			
	//cin >> n;
	//if (n == 1) f = &Add1;
	//-----------------------------

	int n3 = f(1, 2); // 인라인 함수 치환이 되지 않는다.
}

// VC ++ 로 어셈블리 소스 코드를 만들어 내는 방법
// cl 5_lamda.cpp /Ob1 /FAs	대문자 "O"입니다.
//						/Ob1 : 인라인 치환을 적용해 달라
//						/FAs : 어셈 소스를 만들어 달라.

// notepad 5_lamda1.asm 으로 열어서 확인해 보세요.

// g++ 어셈소스 만드는 ㅂ법
// g++ 5_lamda.cpp  -S 하면 5_lamda.s 파일로 생성됩니;다.