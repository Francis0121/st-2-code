; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.22816.0 

	TITLE	C:\Development\visual\1일차\1일차_05_lamda\5_lamda.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Add1@@YAHHH@Z					; Add1
PUBLIC	?Add2@@YAHHH@Z					; Add2
PUBLIC	_main
; Function compile flags: /Odtp
; File c:\development\visual\1일차\1일차_05_lamda\5_lamda.cpp
_TEXT	SEGMENT
_n3$ = -16						; size = 4
_n2$ = -12						; size = 4
_n1$ = -8						; size = 4
_f$ = -4						; size = 4
_main	PROC

; 15   : int main() {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 16   : 	int n1 = Add1(1, 2); // 호출

	push	2
	push	1
	call	?Add1@@YAHHH@Z				; Add1
	add	esp, 8
	mov	DWORD PTR _n1$[ebp], eax

; 17   : 	int n2 = Add2(1, 2); // 기계어 코드 치환 - 속도가 빨라진다.

	mov	eax, 1
	add	eax, 2
	mov	DWORD PTR _n2$[ebp], eax

; 18   : 
; 19   : 	int(*f)(int, int);
; 20   : 
; 21   : 	f = &Add2;

	mov	DWORD PTR _f$[ebp], OFFSET ?Add2@@YAHHH@Z ; Add2

; 22   : 	//-----------------------------
; 23   : 	// 컴파일 시에 해결하기 때문에 이것은 치환되지 않는다.( 런타임이 되어야 알 수 있다. )
; 24   : 	//int n = 0;			
; 25   : 	//cin >> n;
; 26   : 	//if (n == 1) f = &Add1;
; 27   : 	//-----------------------------
; 28   : 
; 29   : 	int n3 = f(1, 2); // 인라인 함수 치환이 되지 않는다.

	push	2
	push	1
	call	DWORD PTR _f$[ebp]
	add	esp, 8
	mov	DWORD PTR _n3$[ebp], eax

; 30   : }

	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\development\visual\1일차\1일차_05_lamda\5_lamda.cpp
;	COMDAT ?Add2@@YAHHH@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Add2@@YAHHH@Z PROC					; Add2, COMDAT

; 11   : inline int Add2(int a, int b) {

	push	ebp
	mov	ebp, esp

; 12   : 	return a + b;

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]

; 13   : }

	pop	ebp
	ret	0
?Add2@@YAHHH@Z ENDP					; Add2
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\development\visual\1일차\1일차_05_lamda\5_lamda.cpp
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Add1@@YAHHH@Z PROC					; Add1

; 7    : int Add1(int a, int b) { 

	push	ebp
	mov	ebp, esp

; 8    : 	return a + b; 

	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR _b$[ebp]

; 9    : }

	pop	ebp
	ret	0
?Add1@@YAHHH@Z ENDP					; Add1
_TEXT	ENDS
END
